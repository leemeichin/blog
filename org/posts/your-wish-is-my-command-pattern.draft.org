#+TITLE: Your wish is my command pattern
#+DATE: <2023-10-05 Thu>
#+CATEGORY: programming

In all my time as a Ruby developer, I have never been more mildly intrigued by the seemingly never-ending variations of what we call a ~Service~ or ~Command~ pattern.

What exactly is this pattern I speak of? It's typically represents a procedural business transaction where a number of steps may need to be taken in sequence to complete an operation, and it's the favoured abstraction for a developer who wants to keep this logic out of their models and controllers. Most of the libraries that provide such an interface will bake in support for database transactions and rollbacks, some kind of ~Result~ object that responds to ~failure~ and ~success~, and of course an opinionated DSL.

Do you really need such a library? I would argue that, frequently, you don't. Here's how a ~Service~ pattern might look in Plain Old Ruby where side-effects include persisting to a database and enqueuing background jobs:

#+begin_src ruby
  class CreatePost
    InsufficientKudosError = Class.new(StandardError)

    def self.call(...) = new(...).call

    def initialize(user:, params:)
      @user = user
      @params = params
    end

    def call
      build_post
      check_kudos
      save_post

      enqueue_moderation
      enqueue_notification

      @post
    rescue ActiveRecord::ValidationError
      validation_error_payload
    rescue InsufficientKudosError
      insufficient_kudos_error_payload
    end

    private

    def build_post = @post ||= Post.new(@params)
    def check_kudos = raise InsufficientKudosError if @user.kudos_count < 1_000
    def save_post = @post.save!
    def enqueue_moderation = PostModerationQueueJob.perform_later(@post)
    def enqueue_notification = CreatePostNotification.perform_later(@post)

    def validation_error_payload = @post.errors.to_json
    def insufficient_kudos_error_payload = { error: :insufficient_kudos }.to_json
  end

  result = CreatePost.call(user: current_user, params: params.permit(:content))
#+end_src

You don't really need much more than that. Maybe you pull out ~.call~ into a mixin or base class to avoid duplication, and the initializer does feel like boilerplate, but it's boilerplate that clearly describes the arguments the service takes. You're basically defining a single public ~#call~ method that performs your business logic step-by-step in a fairly descriptive way.

As for error handling, you're on your own still, but you can make something work with judicious use of exceptions. It's not ideal to use exceptions as control flow, but it could definitely be worse.

Arguably, this doesn't scale very well with larger, more complicated business transactions. Or it does but it requires a more disciplined approach to avoid the almost inevitable ball of mud you end up with.

We can't just leave it there though. What do the alternatives look like and what do they add to the vanilla approach?

*** [[https://github.com/leemeichin/superlime][Superlime]]

I built this one myself to demonstrate basic pattern matching. The implementation is simplistic and arguably quite hacky, and really doesn't offer anything except another weird DSL to remember.

#+begin_src ruby
  class CreatePost < Superlime::Command
    def initialize(user:, params:)
      @user = user
      @params = params
    end

    def call
      build_post
      check_kudos
      save_post

      enqueue_moderation
      enqueue_notification

      broadcast(:ok, @post)
    rescue ActiveRecord::ValidationError
      broadcast(:error, :post_invalid, @post.errors)
    rescue InsufficientKudosError
      broadcast(:error, :insufficient_kudos)
    end

    private
    def build_post = @post ||= Post.new(@params)
    def check_kudos = raise InsufficientKudosError if @user.kudos_count < 1_000
    def save_post = @post.save!
    def enqueue_moderation = PostModerationQueueJob.perform_later(@post)
    def enqueue_notification = CreatePostNotification.perform_later(@post)
  end

  result = CreatePost.call(user: current_user, params: params.permit(:content))

  case result
  in :ok, post } then puts post.inspect
  in :error, :post_invalid, validation_errors then puts validation_errors.inspect
  in :error, :insufficient_kudos then puts "Not enough kudos"
  end
#+end_src

The gem is simply a few lines of code that abuses ~throw~ and ~catch~ in place of ~return~, which means you can treat ~broadcast~ similarly to old-skool ~goto~ in terms of using non-local returns for control flow. I can't really recommend it and the implementation is so small that if you did find it interesting, you could just copy/paste the class from the GitHub repo.

#+begin_aside
*Why do we always use the method ~call~?*

Interesting question! Thanks to Ruby's duck typing, any object that responds to ~#call~ or ~.call~ is considered to be an, erm, callable object.

In practice, blocks, procs and lambdas all define ~#call~ which means they can be invoked via ~.()~ or ~[]~, and with a little bit of effort means you can define ~#to_proc~ on them for shorthand syntax. This seems a little uninspiring at first, but comes in handy with functional code and using methods like ~then~ and ~Proc#curry~.

All of these are the same:

#+begin_src ruby
  foo = ->(arg) { puts arg.inspect }

  foo.("hello") #=> "hello"
  foo["hello"] #=> "hello"
  foo.call("hello") #=> "hello"
#+end_src
#+end_aside

*** [[https://github.com/collectiveidea/interactor][interactor]]

This one has been around for quite a long time. Each ~interactor~ instance receives a mutable context which data can be read from or written to. Arguments required by your ~interactor~ are set in the context before invoking the class, and the same context can be queried after the ~interceptor~ has exceuted to determine if it was successful or not.

That isn't particularly interesting by itself, but ~Organizers~ are a different story (despite the somewhat obscure naming). You can consider this to be an implementation of a ~Saga~, which is a simple finite state machine (FSM) that steps forward for each successful result and offers the ability to rollback (or compensate) if a step fails. Fundamentally, this offers the potential of transactionality to business logic or side-effects that are not typically transactional in nature, like HTTP requests or scheduling emails.

#+begin_aside
You might be familiar with Sagas if you've worked with React and ~redux-saga~. ~redux-saga~ doubles up as an event bus and pulls in a few reactive elements to suit the reality of UI development, but fundamentally you'll be composing little state machines with it and leaving your reducers purely to handle data.
#+end_aside

An example of such an ~Organizer~ would be like this:

#+begin_src ruby

#+end_src


*** [[https://github.com/trailblazer/trailblazer][trailblazer]]

*** [[https://github.com/dry-rb/dry-transaction][dry-transaction]]
